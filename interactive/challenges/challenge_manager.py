"""
–§–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏ –∏ –∏—Ö –∑–∞–ø—É—Å–∫.

üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂.
üîπ –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞: –ë–µ—Ä—ë—Ç —á–µ–ª–ª–µ–Ω–¥–∂, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è.
üîπ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.
üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω—Å–∞: –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.
üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã: –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –≤—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.
üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏.
"""


import sqlite3
import asyncio
from interactive.challenges.challenge_db import get_active_challenge, start_new_challenge, DB_PATH
from telegram import Bot
from keys import TELEGRAM_BOT_TOKEN, CHAT_ID
from logger import log_info, log_error

bot = Bot(token=TELEGRAM_BOT_TOKEN)


def get_random_challenge():
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM challenges WHERE last_used = 0")
    remaining = cursor.fetchone()[0]

    if remaining == 0:
        log_info("üîÑ –í—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫...")
        cursor.execute("UPDATE challenges SET last_used = 0")
        conn.commit()

    cursor.execute(
        "SELECT id, name, description, announcement FROM challenges WHERE last_used = 0 ORDER BY RANDOM() LIMIT 1")
    challenge = cursor.fetchone()

    if challenge:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è (days) –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        cursor.execute("SELECT day_number, text FROM challenge_days WHERE challenge_id = ? ORDER BY day_number",
                       (challenge[0],))
        days = [row[1] for row in cursor.fetchall()]
    else:
        days = []

    conn.close()
    return challenge, days  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π


async def send_challenge_announcement(name, announcement):
    """üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    try:
        await bot.send_message(chat_id=CHAT_ID, text=announcement, parse_mode="Markdown")
        log_info("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")


def mark_challenge_as_used(challenge_id):
    """–ü–æ–º–µ—á–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE challenges SET last_used = 1 WHERE id = ?", (challenge_id,))
    conn.commit()
    conn.close()
    log_info(f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ (ID: {challenge_id}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π!")


def check_and_start_new_challenge():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ."""
    log_info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂...")
    active_challenge = get_active_challenge()

    if active_challenge:
        log_info(f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω: {active_challenge[1]}")
        return

    log_info("‚ö† –ê–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π...")

    challenge, days = get_random_challenge()
    if not challenge:
        log_error("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–µ–π! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ–ª–ª–µ–Ω–¥–∂ –≤ `challenges.db`.")
        return

    if not days:
        log_error(f"‚ùå –£ —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{challenge[1]}' –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `challenge_days`.")
        return

    challenge_id = start_new_challenge(challenge[1], challenge[2], challenge[3], days)
    log_info(f"üéØ –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω: {challenge[1]} (ID: {challenge_id})")

    mark_challenge_as_used(challenge[0])

    asyncio.create_task(send_challenge_announcement(challenge[1], challenge[3]))
