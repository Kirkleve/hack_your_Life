import concurrent.futures
from image.image_search_google import search_image_google
from image.image_search_pexels import search_image_pexels
from image.image_search_unsplash import search_image_unsplash
from image.keyword_extractor import generate_search_keywords
from logger import log_info


def search_image(query):
    """üîç –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å AI-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    optimized_query = generate_search_keywords(query)  # AI —É–ª—É—á—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å

    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(search_image_google, optimized_query): "Google",
            executor.submit(search_image_pexels, optimized_query): "Pexels",
            executor.submit(search_image_unsplash, optimized_query): "Unsplash",
        }

        for future in concurrent.futures.as_completed(futures):
            source = futures[future]
            try:
                result = future.result()
                if result:
                    log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({source}): {result}")
                    return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            except Exception as e:
                log_info(f"‚ùå –û—à–∏–±–∫–∞ –≤ {source}: {e}")

    log_info("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.")
    return None
