import os
import requests
import imagehash
import cv2
import numpy as np
from PIL import Image
from io import BytesIO
from logger import log_info, log_warning, log_error

try:
    log_info(f"‚úÖ OpenCV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {cv2.__version__}")
except Exception as e:
    log_warning(f"‚ùå –û—à–∏–±–∫–∞ —Å OpenCV: {e}")


def get_image_hash(image_url):
    """üîç –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    try:
        response = requests.get(image_url, timeout=10)
        if response.status_code == 200:
            image = Image.open(BytesIO(response.content))
            log_info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            return str(imagehash.average_hash(image))
    except Exception as e:
        log_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None


def contains_faces(image_url):
    """ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—Ü–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ–æ—Ç–æ –ª—é–¥–µ–π)"""
    try:
        response = requests.get(image_url, timeout=10)
        if response.status_code == 200:
            image_array = np.asarray(bytearray(response.content), dtype=np.uint8)  # ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_cv = cv2.imdecode(image_array, cv2.IMREAD_GRAYSCALE)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥

            cv2_base_dir = os.path.dirname(cv2.__file__)  # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ OpenCV
            haarcascade_path = os.path.join(cv2_base_dir, "data", "haarcascade_frontalface_default.xml")

            face_cascade = cv2.CascadeClassifier(haarcascade_path)
            faces = face_cascade.detectMultiScale(image_cv, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
            return len(faces) > 0

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    return False
