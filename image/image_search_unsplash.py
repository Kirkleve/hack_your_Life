"""
–§–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Unsplash API.

üîπ –ó–∞–ø—Ä–æ—Å –∫ Unsplash API: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ñ–æ—Ç–æ —Å –ª–∏—Ü–∞–º–∏.
üîπ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤.
üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
"""


import requests
from image.image_cache import is_duplicate, cache_image
from image.image_filter import get_image_hash, contains_faces
from keys import UNSPLASH_API_KEY
from logger import log_info, log_error


def search_image_unsplash(query):
    """üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Unsplash"""
    url = f"https://api.unsplash.com/search/photos?query={query}&per_page=10"
    headers = {"Authorization": f"Client-ID {UNSPLASH_API_KEY}"}

    try:
        log_info(f"üîé –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Unsplash –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        response = requests.get(url, headers=headers, timeout=10)
        data = response.json()

        for item in data.get("results", []):
            image_url = item["urls"]["regular"]
            image_hash = get_image_hash(image_url)

            if image_hash and not is_duplicate(image_url) and not contains_faces(image_url):
                cache_image(image_url, image_hash)
                log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Unsplash): {image_url}")
                return image_url

    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Unsplash: {e}")

    return None
