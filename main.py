import asyncio

from scheduler import run_schedule
from logger import log_critical  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


async def main():
    """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            asyncio.create_task(run_schedule())
            await asyncio.sleep(3600)
        except Exception as e:
            log_critical(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            await asyncio.sleep(10)  # üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    while True:
        try:
            loop.run_until_complete(main())
        except Exception as e:
            log_critical(f"‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {e}")
            asyncio.sleep(5)
