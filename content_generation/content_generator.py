"""
–§–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.

üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤: –ó–∞–ø—Ä–æ—Å –∫ GPT-3.5 Turbo —Å —É—á—ë—Ç–æ–º —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞.
üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ OpenAI.
üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.
üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –ó–∞–ø–∏—Å—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API.
üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ Telegram.
"""

import openai
from keys import OPENAI_API_KEY
from content_generation.formats import get_post_prompt
from content_generation.topic_manager import get_next_topic
from content_generation.text_processor import split_text_by_paragraphs  # üìå –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
from content_improvements.prompt_optimizer import optimize_prompt
from content_improvements.duplicate_checker import is_duplicate_post, add_post_to_history
from content_improvements.spell_checker import correct_text
from logger import log_warning, log_error

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY


async def generate_post(topic=None):
    """‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    if topic is None:
        topic = get_next_topic()

    base_prompt = get_post_prompt(topic)
    prompt = await optimize_prompt(base_prompt, topic)

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
            timeout=30
        )
        post_text = response["choices"][0]["message"]["content"].strip()
        post_text = correct_text(post_text)  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏

        if is_duplicate_post(post_text):  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏
            return "–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π..."

        add_post_to_history(post_text)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        return split_text_by_paragraphs(post_text)  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

    except openai.error.Timeout:
        log_warning("‚è≥ OpenAI API —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."
