import random
import openai
from keys import OPENAI_API_KEY
from topics import topics  # –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Ç–µ–º
from logger import log_warning, log_error

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY

# ‚úÖ –•—Ä–∞–Ω–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –ø–æ–¥—Ä—è–¥
used_topics = []


def get_next_topic():
    """üìå –í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ."""
    global used_topics
    if len(used_topics) == len(topics):
        used_topics = []  # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    available_topics = [topic for topic in topics if topic not in used_topics]
    next_topic = random.choice(available_topics)
    used_topics.append(next_topic)
    return next_topic


def generate_post(topic=None):
    """‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    if topic is None:
        topic = get_next_topic()

    # üîπ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞
    post_type = random.choice(["storytelling", "checklist", "advice"])

    if post_type == "storytelling":
        prompt = (
            f"–ù–∞–ø–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —Ç–µ–º—É: \"{topic}\". "
            "–î–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–æ –º–Ω–æ–π. "
            "–¢–æ–Ω ‚Äî –∂–∏–≤–æ–π, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –¥—Ä—É–≥—É. "
            "–í –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —á–∏—Ç–∞—Ç–µ–ª—è. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: \n\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã\n- –ò—Å—Ç–æ—Ä–∏—è\n- –í—ã–≤–æ–¥\n- –û–¥–∏–Ω —Ö—ç—à—Ç–µ–≥. "
            "–î–æ–±–∞–≤—å 1-2 —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞. "
            "–û–±—ä—ë–º ‚Äî –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤."
        )

    elif post_type == "checklist":
        prompt = (
            f"–°–æ–∑–¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ —Ç–µ–º–µ: \"{topic}\". "
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —á—ë—Ç–∫–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–µ–º—É. "
            "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-7 –ø—É–Ω–∫—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, —á—ë—Ç–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏. "
            "–§–æ—Ä–º–∞—Ç:\n\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã\n- –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n- –ß–µ–∫-–ª–∏—Å—Ç\n- –û–¥–∏–Ω —Ö—ç—à—Ç–µ–≥. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ ‚úî –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π. "
            "–û–±—ä—ë–º ‚Äî –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤."
        )

    elif post_type == "advice":
        prompt = (
            f"–ù–∞–ø–∏—à–∏ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Ç–µ–º—É: \"{topic}\". "
            "–ò—Å–ø–æ–ª—å–∑—É–π —á—ë—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –Ω–∞—É—á–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è. "
            "–¢–æ–Ω ‚Äî —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: \n\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã\n- –û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å\n- 3-5 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"
            "\n- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n- –û–¥–∏–Ω —Ö—ç—à—Ç–µ–≥. "
            "–î–æ–±–∞–≤—å 1-2 —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –≤–∞–∂–Ω–æ–µ, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞. "
            "–û–±—ä—ë–º ‚Äî –¥–æ 1800 —Å–∏–º–≤–æ–ª–æ–≤."
        )

    else:
        prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ–ª–µ–∑–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: \"{topic}\" —Å —á—ë—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –±–µ–∑ –æ—à–∏–±–æ–∫."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
            timeout=30
        )
        return format_text(response["choices"][0]["message"]["content"].strip(), post_type)

    except openai.error.Timeout:
        log_warning("‚è≥ OpenAI API —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."


def format_text(text, post_type):
    """üìå –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞."""
    text = text.strip()

    # ‚úÖ –î–µ–ª–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–º–∏
    if post_type == "checklist":
        text = text.replace("\n- ", "\n‚úî ")

        # ‚úÖ –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = "\n".join(line.strip() for line in text.split("\n") if line.strip())

    return text


def split_text_by_paragraphs(text, max_length=1024):
    """‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã."""
    paragraphs = text.split('\n')  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
    if not paragraphs:
        return "", [""]  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    title = paragraphs[0]  # üèÜ –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
    body = "\n".join(paragraphs[1:]).strip()  # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç

    # üîπ –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –Ω–∞ –±–ª–æ–∫–∏ (–ø–æ 1024 —Å–∏–º–≤–æ–ª–∞)
    messages = []
    current_message = ""

    for paragraph in body.split('\n'):
        if len(current_message) + len(paragraph) + 1 <= max_length:
            current_message += (paragraph + "\n")
        else:
            messages.append(current_message.strip())
            current_message = paragraph + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞
    if current_message.strip():
        messages.append(current_message.strip())

    return title, messages  # ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
