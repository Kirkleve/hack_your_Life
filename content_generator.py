import random
import openai
from keys import OPENAI_API_KEY
from topics import topics  # –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Ç–µ–º
from logger import log_warning, log_error
from content_improvements.trend_analyzer import get_trending_topics
from content_improvements.prompt_optimizer import optimize_prompt
from content_improvements.duplicate_checker import is_duplicate_post, add_post_to_history
from content_improvements.spell_checker import correct_text

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY

# ‚úÖ –•—Ä–∞–Ω–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –ø–æ–¥—Ä—è–¥
used_topics = []


def get_next_topic():
    """üìå –í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ."""
    global used_topics
    if len(used_topics) == len(topics):
        used_topics = []  # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    available_topics = [topic for topic in topics if topic not in used_topics]
    next_topic = random.choice(available_topics)
    used_topics.append(next_topic)
    return next_topic


def generate_post(topic=None):
    """‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∏."""
    if topic is None:
        topic = get_next_topic()

    trending_topics = get_trending_topics()
    topic = topic if not trending_topics else f"{topic} ({random.choice(trending_topics)})"

    # üîπ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞
    post_type = random.choice(["storytelling", "checklist", "advice"])
    base_prompt = (
        "–ù–∞–ø–∏—à–∏ –ø–æ–ª–µ–∑–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É: \"{topic}\". "
        "–¢–æ–Ω ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. "
        "–î–æ–±–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã. "
        "–û–±—ä–µ–º ‚Äî –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤."
    )

    prompt = optimize_prompt(base_prompt, topic)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
            timeout=30
        )
        post_text = response["choices"][0]["message"]["content"].strip()
        post_text = correct_text(post_text)  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏

        if is_duplicate_post(post_text):  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏
            return "–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π..."

        add_post_to_history(post_text)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        return post_text

    except openai.error.Timeout:
        log_warning("‚è≥ OpenAI API —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."


def split_text_by_paragraphs(text, max_length=1024):
    """‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã."""
    paragraphs = text.split('\n')  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
    if not paragraphs:
        return "", [""]  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    title = paragraphs[0]  # üèÜ –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
    body = "\n".join(paragraphs[1:]).strip()  # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç

    # üîπ –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –Ω–∞ –±–ª–æ–∫–∏ (–ø–æ 1024 —Å–∏–º–≤–æ–ª–∞)
    messages = []
    current_message = ""

    for paragraph in body.split('\n'):
        if len(current_message) + len(paragraph) + 1 <= max_length:
            current_message += (paragraph + "\n")
        else:
            messages.append(current_message.strip())
            current_message = paragraph + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞
    if current_message.strip():
        messages.append(current_message.strip())

    return title, messages  # ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
